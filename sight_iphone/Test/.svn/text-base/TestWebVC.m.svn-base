//
//  TestWebVC.m
//  sight_iphone
//
//  Created by fengshaobo on 15/5/3.
//  Copyright (c) 2015年 fengshaobo. All rights reserved.
//

#import "TestWebVC.h"
#import "JSONKit.h"

#define kSJSBridgeProtocolScheme @"jsbridge"
#define kSJSBridgeNotificationSeparator @"-"
#define kSJSBridgePostNotificationWithId @"PostNotificationWithId"

@interface TestWebVC ()

@property (nonatomic, strong)NaviBarItem *leftNavBar;
@property (nonatomic, strong)NaviBarItem *rightNavBar;
@property (nonatomic, strong)UILabel *jsLabel;
@property (nonatomic, strong)UIButton *jsButton;

@end

@implementation TestWebVC

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // step2 : navbar
    
    [self layoutRootViewDefault:self.view];
    [naviBar setTitle:@"Web Demo"];
    
    self.leftNavBar = [[NaviBarItem alloc] initBackItem:self action:@selector(goBack:)];
    [naviBar setLeftBarItem:self.leftNavBar];

    self.rightNavBar = [[NaviBarItem alloc] initTextItem:@"分享" target:self action:@selector(share)];
    [naviBar setRightBarItem:self.rightNavBar];

    [self stopLoading:YES];
    
    // step3 : webview

    self.webView = [[UIWebView alloc] initWithFrame:viewContent.bounds];
    self.webView.delegate =  self;
    [viewContent addSubview:self.webView];
    
    NSURL* url = [[NSBundle mainBundle] URLForResource:@"test" withExtension:@"html"];
    [self.webView loadRequest:[NSURLRequest requestWithURL:url]];
    
    // step4 : setup js label and button
    
    self.jsLabel = [[UILabel alloc] initWithFont:kMediumFont andText:nil andColor:[UIColor ssTextBlackColor]];
    self.jsLabel.backgroundColor = [UIColor ssYellowColor];
    self.jsLabel.numberOfLines = 0;
    self.jsLabel.frame = CGRectMake(0, viewContent.height - 100, viewContent.width, 44);
    [viewContent addSubview:self.jsLabel];
    
    self.jsButton = [UIButton buttonWithType:UIButtonTypeCustom];
    self.jsButton.backgroundColor = [UIColor ssYellowColor];
    [self.jsButton addTarget:self action:@selector(callJs) forControlEvents:UIControlEventTouchUpInside];
    [self.jsButton setTitle:@"call js" forState:UIControlStateNormal];
    self.jsButton.frame = CGRectMake(0, viewContent.height - 44, viewContent.width, 44);
    [viewContent addSubview:self.jsButton];
}

- (void)callJs
{
    NSString *name = @"test";
    NSDictionary *userInfo = [NSDictionary dictionaryWithObjectsAndKeys:@"click by uibutton",@"message", nil];
    [self.webView stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@"jsBridge.trigger('%@',%@)",name,[userInfo JSONString]]];
}

- (void)share
{
    
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

#pragma mark -
- (void)injectionJS
{
    NSString *filePath = [[NSBundle mainBundle]pathForResource:@"test" ofType:@"js"];
    NSString *jsString = [[NSString alloc]initWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:nil];
    [self.webView stringByEvaluatingJavaScriptFromString:jsString];
}

#pragma mark UIWebViewDelegate

- (void)webViewDidStartLoad:(UIWebView *)webView {
    
}


- (void)webViewDidFinishLoad:(UIWebView *)webView {
    
    [self injectionJS];
    
}

- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
    NSURL *url = [request URL];
    
    if ([[[url scheme] lowercaseString] isEqualToString:kSJSBridgeProtocolScheme]) {
        [self dispatchNotification:[url host]];
        return NO;
    }
    else {
        return YES;
    }
    
}

- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error {
    //forward
}

- (void)dispatchNotification:(NSString*)notificationString
{
    if([notificationString hasPrefix:kSJSBridgePostNotificationWithId])
    {
        NSRange range = [notificationString rangeOfString:kSJSBridgeNotificationSeparator];
        NSInteger index = range.location + range.length;
        NSString *notificationId = [notificationString substringFromIndex:index];
        
        [self fetchNotificationWithId:notificationId];
        
    }
    else
    {
        //processError
        NSLog(@"SJSBridge: WARNING: Received unknown SJSBridge command %@://%@", kSJSBridgeProtocolScheme, notificationString);
    }
}

#pragma handle js enent
- (void)fetchNotificationWithId:(NSString*)notificationId
{
    NSString *responseString = [self.webView stringByEvaluatingJavaScriptFromString:[NSString stringWithFormat:@"jsBridge.popNotificationObject(%@)", notificationId]];
    NSDictionary *responseDict = [responseString objectFromJSONString];
    
    NSString *name = responseDict[@"name"];
    NSDictionary *dict = responseDict[@"userInfo"];
    NSString *message = dict[@"message"];
    
    if ([name isEqualToString:@"oc"]) {
        self.jsLabel.text = [NSString stringWithFormat:@"name = %@\nmessage = %@",name,message];
    }
    else if ([name isEqualToString:@"type_title"]) {
        [naviBar setTitle:message];
    }
    else if ([name isEqualToString:@"type_navbar"]) {
        self.rightNavBar = [[NaviBarItem alloc] initTextItem:message target:self action:@selector(share)];
        [naviBar setRightBarItem:self.rightNavBar];
    }
    
}

@end
